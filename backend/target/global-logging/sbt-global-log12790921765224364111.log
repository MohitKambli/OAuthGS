[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\dell\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\dell\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.9 (Oracle Corporation Java 11.0.20)
[debug]       Load.loadUnit: plugins took 154.383ms
[debug]       Load.loadUnit: defsScala took 0.3589ms
[debug] [Loading] Scanning directory C:\Users\dell\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\dell\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 24.5739 ms
[debug]           Load.resolveProject(global-plugins) took 70.6395ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\dell\.sbt\1.0\plugins, plugins: List(<none>))) took 137.5754ms
[debug] [Loading] Done in C:\Users\dell\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 163.4682ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3059ms
[debug]     Load.loadUnit(file:/C:/Users/dell/.sbt/1.0/plugins/, ...) took 329.6262ms
[debug]   Load.apply: load took 572.7152ms
[debug]   Load.apply: resolveProjects took 12.8931ms
[debug]   Load.apply: finalTransforms took 114.9843ms
[debug]   Load.apply: config.delegates took 9.7224ms
[debug]   Load.apply: Def.make(settings)... took 690.6387ms
[debug]   Load.apply: structureIndex took 163.8321ms
[debug]   Load.apply: mkStreams took 2.7904ms
[info] loading global plugins from C:\Users\dell\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3623.8106ms
[debug]           Load.loadUnit: plugins took 24.3016ms
[debug]           Load.loadUnit: defsScala took 0.0066ms
[debug] [Loading] Scanning directory D:\Programming\Projects\OAuthIntegrationForGoogleSheets\backend\project
[debug]             Load.loadUnit: mkEval took 10.6048ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\Programming\Projects\OAuthIntegrationForGoogleSheets\backend\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.2546 ms
[info] loading settings for project backend-build from idea.sbt ...
[debug]               Load.resolveProject(backend-build) took 7.1756ms
[debug]             Load.loadTransitive: finalizeProject(Project(id backend-build, base: D:\Programming\Projects\OAuthIntegrationForGoogleSheets\backend\project, plugins: List(<none>))) took 10.0478ms
[debug] [Loading] Done in D:\Programming\Projects\OAuthIntegrationForGoogleSheets\backend\project, returning: (backend-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 262.3899ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.944ms
[debug]         Load.loadUnit(file:/D:/Programming/Projects/OAuthIntegrationForGoogleSheets/backend/project/, ...) took 291.6648ms
[debug]       Load.apply: load took 293.1276ms
[debug]       Load.apply: resolveProjects took 0.1426ms
[debug]       Load.apply: finalTransforms took 11.6598ms
[debug]       Load.apply: config.delegates took 0.4202ms
[debug]       Load.apply: Def.make(settings)... took 133.7972ms
[debug]       Load.apply: structureIndex took 57.6281ms
[debug]       Load.apply: mkStreams took 0.0034ms
[info] loading project definition from D:\Programming\Projects\OAuthIntegrationForGoogleSheets\backend\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 2266.2774ms
[debug]     Load.loadUnit: defsScala took 0.0035ms
[debug] [Loading] Scanning directory D:\Programming\Projects\OAuthIntegrationForGoogleSheets\backend
[debug]       Load.loadUnit: mkEval took 0.2844ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 45.3198 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 69.4152ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: D:\Programming\Projects\OAuthIntegrationForGoogleSheets\backend, plugins: List(<none>))) took 122.7672ms
[debug] [Loading] Done in D:\Programming\Projects\OAuthIntegrationForGoogleSheets\backend, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 4311.3334ms
[debug]     Load.loadUnit: cleanEvalClasses took 82.0615ms
[debug]   Load.loadUnit(file:/D:/Programming/Projects/OAuthIntegrationForGoogleSheets/backend/, ...) took 6660.7489ms
[debug] Load.apply: load took 6666.657ms
[debug] Load.apply: resolveProjects took 0.3207ms
[debug] Load.apply: finalTransforms took 46.2798ms
[debug] Load.apply: config.delegates took 0.3128ms
[debug] Load.apply: Def.make(settings)... took 80.0837ms
[debug] Load.apply: structureIndex took 28.0871ms
[debug] Load.apply: mkStreams took 0.0045ms
[info] set current project to backend (in build file:/D:/Programming/Projects/OAuthIntegrationForGoogleSheets/backend/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 56683 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 56683, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to backend (in build file:/D:/Programming/Projects/OAuthIntegrationForGoogleSheets/backend/)
[debug] > Exec(idea-shell, None, None)
